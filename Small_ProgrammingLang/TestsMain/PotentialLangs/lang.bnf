/**
 * Lang: BNF Grammar.
 *
 * Lex grammar is in: examples/lang.lex
 * Test source code is in: examples/test.lang
 *
 * How to run:
 *
 *   ./bin/syntax \
 *     --grammar examples/lang.bnf \
 *     --lex examples/lang.lex \
 *     --mode lalr1 \
 *     --file examples/test.lang
 */

%{

/**
 * Creates generic binary expression node.
 */
function BinaryExpression(left, operator, right) {
  return {
    type: 'BinaryExpression',
    operator,
    left,
    right
  };
}

/**
 * Creates logical expression node.
 */
function LogicalExpression(left, operator, right) {
  return {
    type: 'LogicalExpression',
    operator,
    left,
    right
  };
}



/**
 * Creates a literal node.
 */
function Literal(typePrefix, value) {
  return {
    type: typePrefix + 'Literal',
    value,
  };
}

/**
 * Creates an If-statement node.
 */
function IfStatement(test, consequent, alternate) {
  return {
    type: 'IfStatement',
    test,
    consequent,
    alternate,
  };
}

/**
 * ForPropStatement.
 */
function ForPropStatement(left, right, body) {
  if (left.type === 'VariableDeclaration' && left.declarations.length !== 1) {
    throw new Error(
      'SyntaxError: Invalid left-hand side in for-prop loop: ' +
      'Must have a single binding.'
    );
  }

  return {
    type: 'ForPropStatement',
    left,
    right,
    body,
  };
}

/**
 * Creates a Lambda function node.
 *
 * The lambda parameter list is handled by the cover grammar:
 * (x, y) is a sequence expression, however
 * (x, y) -> { ... } is a lambda function.
 */
function LambdaFunction(paramsNode, body) {
  let params = paramsNode.type === 'SequenceExpression'
    ? paramsNode.expressions
    : [paramsNode];

  // Static semantics: validate function parameters.
  params.forEach(e => {
    if (e.type !== 'Identifier') {
      throw new Error(
        'SyntaxError: Lambda parameters can only be identifiers.'
      );
    }
  });

  return {
    type: 'LambdaFunction',
    params,
    body,
  };
}

function BlockStatement(statements) {
  enforceBlockStatementList(statements);
  return {
    type: 'BlockStatement',
    statements,
  };
}

function ObjectLiteral(properties) {
  enforceObjectProperties(properties);
  return {
    type: 'ObjectLiteral',
    properties,
  }
}

/**
 * See `enforceObjectProperties`.
 */
function enforceBlockStatementList(nodes) {
  nodes.forEach(node => {
    if (node.type == 'Property') {
      throw new Error(
        'Block: invalid statement.'
      );
    }
  });
}

/**
 * Since we use cover grammar to parse blocks and objects,
 * this function checks that all entries in a block are
 * object properties.
 */
function enforceObjectProperties(nodes) {
  nodes.forEach(node => {
    if (node.type !== 'Property') {
      throw new Error(
        'ObjectLiteral: invalid property declaration.'
      );
    }
  });
}

/**
 * MemberExpression.
 */
function MemberExpression(object, property) {
  return {
    type: 'MemberExpression',
    object,
    property,
  };
}

%}

/**
 * The `THEN` precedence is lower, than of `ELSE`, so
 * no shift-reduce conflict, and no "dangling-else" problem.
 */
%nonassoc THEN
%nonassoc ELSE

%%

/**
 * Main Program.
 */
Program
  : StatementList
    { $$ = {
        type: 'Program',
        body: $1,
      }
    }
  ;

/**
 * StatementList.
 */
StatementList
  : Statement
      { $$ = [$1] }

  | StatementList Statement
      { $1.push($2); $$ = $1 }
  ;

/**
 * Statements.
 */
Statement
  : BlockStatement
  | EmptyStatement
  | VariableDeclaration
  | FunctionDeclaration
  | ExpressionStatement
  | IfStatement
  | IterationStatement
  | ReturnStatement
  | BreakStatement
  | ContinueStatement
  | ClassDeclaration
  ;

/**
 * Class declaration.
 */
ClassDeclaration
  : CLASS Identifier OptClassExtends BlockStatement
    {
      $$ = {
        type: 'ClassDeclaration',
        id: $2,
        superClass: $3,
        body: $4,
      }
    }
  ;

OptClassExtends
  : ClassExtends
  | /* empty */
    { $$ = null }
  ;

ClassExtends
  : EXTENDS Identifier
    { $$ = $2 }
  ;

/**
 * EmptyStatement.
 */
EmptyStatement
  : SEMICOLON
    {
      $$ = {
        type: 'EmptyStatement',
      }
    }
  ;

/**
 * BlockStatement.
 */
BlockStatement
  : BlockOrObject
    {
      $$ = BlockStatement($1)
    }
  ;

/**
 * BlockOrObject.
 *
 * Cover grammar: { } at statement position should be parsed as a Block,
 * however at expression position should be parsed as ObjectLiteral.
 *
 * We could use lookahead restrictions by doubling the expression
 * productions (using "NoCurly" version of expression productions) in order
 * to parse `ExpressionStatement` correctly, however we choose here to use
 * cover grammar with single `BlockOrObject` production, and enforcing
 * needed nodes (object properties or statement list) based on the
 * statement or expression position.
 */
BlockOrObject
  : LCURLY OptBlockOrObjectEntries RCURLY
    { $$ = $2 }
  ;

/**
 * OptBlockOrObjectEntries.
 *
 * Cover grammar: see `BlockOrObject`.
 */
OptBlockOrObjectEntries
  : StatementList

  | PropertyList OptComma
    { $$ = $1 }

  | /* empty */
    { $$ = [] }
  ;

/**
 * IterationStatement.
 */
IterationStatement
  : DO Statement WHILE LPAREN Expression RPAREN SEMICOLON
    {
      $$ = {
        type: 'DoWhileStatement',
        body: $2,
        test: $5,
      }
    }

  | WHILE LPAREN Expression RPAREN Statement
    {
      $$ = {
        type: 'WhileStatement',
        body: $5,
        test: $3,
      }
    }

    | FOR
        LPAREN
          OptForStatementInit SEMICOLON
          OptExpression SEMICOLON
          OptExpression
        RPAREN Statement
      {
        $$ = {
          type: 'ForStatement',
          init: $3,
          test: $5,
          update: $7,
          body: $9,
        }
      }

    | FOR
        LPAREN
          ForPropStatementInit
          COLON
          Expression
        RPAREN Statement
      { $$ = ForPropStatement($3, $5, $7) }
  ;

/**
 * ForPropStatementInit.
 */
ForPropStatementInit
  : VariableDeclarationListInit
  | LeftHandSideExpression
  ;

/**
 * ForStatementInit.
 */
OptForStatementInit
  : VariableDeclarationListInit
  | Expression
  | /* empty */ { $$ = null }
  ;

/**
 * ReturnStatement.
 */
ReturnStatement
  : RETURN OptExpression SEMICOLON
    {
      $$ = {
        type: 'ReturnStatement',
        argument: $2,
      }
    }
  ;

/**
 * BreakStatement.
 */
BreakStatement
  : BREAK SEMICOLON
    {
      $$ = {
        type: 'BreakStatement',
      }
    }
  ;

/**
 * ContinueStatement.
 */
ContinueStatement
  : CONTINUE SEMICOLON
    {
      $$ = {
        type: 'ContinueStatement',
      }
    }
  ;

/**
 * Optional expression.
 */
OptExpression
  : Expression
  | /* empty */ { $$ = null }
  ;

/**
 * FunctionDeclaration.
 */
FunctionDeclaration
  : FN Identifier LPAREN OptFormalParameterList RPAREN BlockStatement
    {
      $$ = {
        type: 'FunctionDeclaration',
        id: $2,
        params: $4,
        body: $6,
      }
    }
  ;

/**
 * Optional Identifier.
 */
OptIdentifier
  : Identifier
  | /* empty */ { $$ = null }
  ;

/**
 * OptFormalParameterList.
 */
OptFormalParameterList
  : FormalParameterList
  | /* empty */ { $$ = [] }
  ;

/**
 * FormalParameterList.
 */
FormalParameterList
  : Identifier
    { $$ = [$1] }

  | FormalParameterList COMMA Identifier
    { $1.push($3); $$ = $1 }
  ;

/**
 * IfStatement.
 */
IfStatement
  : IF LPAREN Expression RPAREN Statement %prec THEN
    { $$ = IfStatement($3, $5) }

  | IF LPAREN Expression RPAREN Statement ELSE Statement
    { $$ = IfStatement($3, $5, $7) }
  ;

/**
 * ExpressionStatement.
 */
ExpressionStatement
  : Expression SEMICOLON
    {
      $$ = {
        type: 'ExpressionStatement',
        expression: $1,
      }
    }
  ;

/**
 * Expression.
 */
Expression
  : SequenceExpression
    {
      let expression;

      // Only one expression in the sequence, just return it.
      if ($1.length === 1) {
        return $$ = $1[0];
      }

      // Else, wrap into an actual sequence expression.
      $$ = {
        type: 'SequenceExpression',
        expressions: $1,
      };
    }
  ;

/**
 * SequenceExpression: a comma-separated list of expressions.
 */
SequenceExpression
  : AssignmentExpression
    { $$ = [$1] }

  | SequenceExpression COMMA AssignmentExpression
    { $1.push($3); $$ = $1 }
  ;

/**
 * VariableDeclaration.
 */
VariableDeclaration
  : VariableDeclarationListInit SEMICOLON { $$ = $1 }
  ;

/**
 * VariableDeclarationListInit.
 */
VariableDeclarationListInit
  : LET VariableDeclarationList
    { $$ = {
        type: 'VariableDeclaration',
        declarations: $2,
      }
    }
  ;

/**
 * VariableDeclarationList.
 */
VariableDeclarationList
  : VariableDeclarator
    { $$ = [$1] }

  | VariableDeclarationList COMMA VariableDeclarator
    { $1.push($3); $$ = $1 }
  ;

/**
 * VariableDeclarator.
 */
VariableDeclarator
  : Identifier VariableInitializer
    { $$ = {
        type: 'VariableDeclarator',
        id: $1,
        init: $2,
      };
    }
  ;

/**
 * VariableInitializer.
 */
VariableInitializer
  : SIMPLE_ASSIGN AssignmentExpression
    { $$ = $2 }

  | /* empty */ { $$ = null }
  ;

/**
 * Literal (numbers, and strings).
 */
Literal
  : StringLiteral
  | NumericLiteral
  | TRUE   { $$ = Literal('Boolean', true) }
  | FALSE  { $$ = Literal('Boolean', false) }
  | NULL   { $$ = Literal('Null', null) }
  ;

/**
 * StringLiteral.
 */
StringLiteral
  : STRING { $$ = Literal('String', $1) }
  ;

/**
 * NumericLiteral.
 */
NumericLiteral
  : NUMBER { $$ = Literal('Numeric', Number($1)) }
  ;

/**
 * Primary expression.
 */
PrimaryExpression
  : LeftHandSideExpression
  | NewExpression
  | Literal
  | ArrayLiteral
  | ObjectLiteral
  | ParenthisizedExpression LambdaTail
    {
      // Lambda function.
      if ($2) {
        return $$ = LambdaFunction($1, $2);
      }

      // Else, it's just a grouping operator.
      $$ = $1;
    }
  ;

/**
 * New expression;
 */
NewExpression
  : NEW MemberExpression Arguments
    {
      $$ = {
        type: 'NewExpression',
        callee: $2,
        arguments: $3,
      }
    }
  ;

/**
 * This expression.
 */
ThisExpression
  : THIS
    {
      $$ = {
        type: 'ThisExpression',
      }
    }
  ;

/**
 * ArrayLiteral.
 */
ArrayLiteral
  : LBRACKET OptElementList RBRACKET
    {
      $$ = {
        type: 'ArrayLiteral',
        elements: $2,
      }
    }
  ;

/**
 * OptElementList.
 */
OptElementList
  : ElementList OptComma
    { $$ = $1 }

  | /* empty */
    { $$ = [] }
  ;

/**
 * OptComma.
 */
OptComma
  : COMMA
  | /* empty */ { $$ = null }
  ;

/**
 * ElementList.
 */
ElementList
  : AssignmentExpression
    { $$ = [$1] }

  | ElementList COMMA AssignmentExpression
    { $1.push($3); $$ = $1 }
  ;

/**
 * ObjectLiteral.
 */
ObjectLiteral
  : BlockOrObject
    { $$ = ObjectLiteral($1) }
  ;

/**
 * PropertyList.
 */
PropertyList
  : PropertyAssignment
    { $$ = [$1] }

  | PropertyList COMMA PropertyAssignment
    { $1.push($3); $$ = $1 }
  ;

/**
 * PropertyAssignment.
 */
PropertyAssignment
  : PropertyName COLON AssignmentExpression
    {
      $$ = {
        type: 'Property',
        key: $1,
        value: $3,
      }
    }
  ;

/**
 * PropertyName.
 */
PropertyName
  : StringLiteral
  | Keyword
  | NumericLiteral
  | Identifier
  ;

/**
 * Keyword.
 */
Keyword
  : LET
  | IF
  | ELSE
  | TRUE
  | FALSE
  | NULL
  | RETURN
  | FN
  | DO
  | WHILE
  | FOR
  | BREAK
  | CONTINUE
  ;

/**
 * ParenthisizedExpression.
 */
ParenthisizedExpression
  : LPAREN Expression RPAREN { $$ = $2 }
  ;

/**
 * LambdaTail.
 *
 * This can be either empty, or an arrow of a lambda function.
 */
LambdaTail
  : ARROW BlockStatement
    { $$ = $2 }

  | /* empty */ { $$ = null }
  ;

/**
 * Identifier.
 */
Identifier
  : IDENTIFIER
    { $$ = {
        type: 'Identifier',
        value: $1,
      }
    }
  ;

/**
 * Left-hand side expression.
 *
 * foo = 10;
 * foo['bar'] = 10;
 * foo.bar = 20;
 */
LeftHandSideExpression
  : MemberExpression
  ;

/**
 * MemberExpression.
 */
MemberExpression
  : MemberExpression LBRACKET Expression RBRACKET
    { $$ = MemberExpression($1, $3)}

  | MemberExpression DOT Identifier
    { $$ = MemberExpression($1, $3)}

  | Identifier
  | ThisExpression
  ;

/**
 * Assignment expression.
 *
 * AssignmentOperator: =, *=, /=, +=, -=,
 *
 * x = y
 * x *= y
 * x /= y
 * x += y
 * x -= y
 */
AssignmentExpression
  : LogicalORExpression
  | LeftHandSideExpression AssignmentOperator AssignmentExpression
    { $$ = {
        type: 'AssignmentExpression',
        left: $1,
        operator: $2,
        right: $3,
      }
    }
  ;

/**
 * AssignmentOperator: =, *=, /=, +=, -=.
 */
AssignmentOperator
  : SIMPLE_ASSIGN
  | COMPLEX_ASSIGN
  ;

/**
 * Logical OR expression.
 *
 * x || y
 */
LogicalORExpression
  : LogicalANDExpression
  | LogicalORExpression LOGICAL_OR LogicalANDExpression
      { $$ = LogicalExpression($1, $2, $3) }
  ;

/**
 * Logical AND expression.
 *
 * x && y
 */
LogicalANDExpression
  : EqualityExpression
  | LogicalANDExpression LOGICAL_AND EqualityExpression
      { $$ = LogicalExpression($1, $2, $3) }
  ;

/**
 * Equality expressions.
 *
 * EQUALITY_OPERATOR: ==, !=
 *
 * x == y
 * x != y
 */
EqualityExpression
  : RelationalExpression
  | EqualityExpression EQUALITY_OPERATOR RelationalExpression
      { $$ = BinaryExpression($1, $2, $3) }
  ;

/**
 * Relational expressions.
 *
 * RELATIONAL_OPERATOR: >, >=, <, <=
 *
 * x > y
 * x >= y
 * x < y
 * x <= y
 */
RelationalExpression
  : AdditiveExpression
  | RelationalExpression RELATIONAL_OPERATOR AdditiveExpression
      { $$ = BinaryExpression($1, $2, $3) }
  ;

/**
 * Additive expressions.
 *
 * ADDITIVE_OPERATOR: +, -
 *
 * x + y
 * x - y
 */
AdditiveExpression
  : MultiplicativeExpression
  | AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression
      { $$ = BinaryExpression($1, $2, $3) }
  ;

/**
 * Additive expressions.
 *
 * MULTIPLICATIVE_OPERATOR: *, /
 *
 * x * y
 * x / y
 */
MultiplicativeExpression
  : UnaryExpression
  | MultiplicativeExpression MULTIPLICATIVE_OPERATOR UnaryExpression
      { $$ = BinaryExpression($1, $2, $3) }
  ;

/**
 * Unary expression.
 */
UnaryExpression
  : PrimaryExpression
  | CallExpression
  | ADDITIVE_OPERATOR UnaryExpression
    { $$ = UnaryExpression($1, $2) }
  ;

/**
 * CallExpression.
 */
CallExpression
  : Callee Arguments
    {
      $$ = {
        type: 'CallExpression',
        callee: $1,
        arguments: $2,
      };
    }
  | Super Arguments
    {
      $$ = {
        type: 'CallExpression',
        callee: $1,
        arguments: $2,
      };
    }
  ;

Super
  : SUPER
    {
      $$ = {
        type: 'Super',
      }
    }
  ;

/**
 * Callee.
 *
 * Simple function call `foo();` or chained `foo()();`.
 */
Callee
  : LeftHandSideExpression
  | CallExpression
  ;

/**
 * Call expression arguments.
 */
Arguments
  : LPAREN OptArgumentList RPAREN
    { $$ = $2 }
  ;

/**
 * OptArgumentList.
 */
OptArgumentList
  : ArgumentList
  | /* empty */ { $$ = [] }
  ;

/**
 * ArgumentList.
 */
ArgumentList
  : AssignmentExpression
    { $$ = [$1] }

  | ArgumentList COMMA AssignmentExpression
    { $$ = $1; $1.push($3) }
  ;
