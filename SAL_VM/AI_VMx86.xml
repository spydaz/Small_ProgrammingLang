<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>AI_VMx86</name>
  </assembly>
  <members>
    <member name="N:AI_VMx86.STACK_VM">
    </member>
    <member name="T:AI_VMx86.STACK_VM.X86API">
    </member>
    <member name="M:AI_VMx86.STACK_VM.X86API.RunMachineCode(System.String@)">
      <param name="Code">
</param>
    </member>
    <member name="F:AI_VMx86.STACK_VM.X86API.Tree">
    </member>
    <member name="T:AI_VMx86.STACK_VM.Ext">
    </member>
    <member name="M:AI_VMx86.STACK_VM.Ext.SplitAtNewLine(System.String)">
      <param name="input">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.Ext.ExtractLastChar(System.String@)">
      <param name="InputStr">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.Ext.ExtractFirstChar(System.String@)">
      <param name="InputStr">
</param>
    </member>
    <member name="T:AI_VMx86.STACK_VM.Ext.GrammarRule">
      <summary>
Rule for tagging text</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.Ext.GrammarRule.ToJson">
      <summary>
Serializes object to json</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.Ext.GrammarRule.ComponentStrings">
    </member>
    <member name="F:AI_VMx86.STACK_VM.Ext.GrammarRule.TagString">
    </member>
    <member name="M:AI_VMx86.STACK_VM.Ext.GrammarRule.#ctor">
    </member>
    <member name="T:AI_VMx86.STACK_VM.Ext.Token">
      <summary>
AbstractSyntax Basic TOKEN</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.Ext.Token.ToJson">
    </member>
    <member name="F:AI_VMx86.STACK_VM.Ext.Token.Name">
    </member>
    <member name="F:AI_VMx86.STACK_VM.Ext.Token.Value">
    </member>
    <member name="T:AI_VMx86.STACK_VM.Ext.AbstractSyntaxToken">
    </member>
    <member name="M:AI_VMx86.STACK_VM.Ext.AbstractSyntaxToken.ToJson">
    </member>
    <member name="F:AI_VMx86.STACK_VM.Ext.AbstractSyntaxToken.Name">
    </member>
    <member name="F:AI_VMx86.STACK_VM.Ext.AbstractSyntaxToken.Value">
    </member>
    <member name="N:AI_VMx86.My">
    </member>
    <member name="T:AI_VMx86.My.MyApplication">
    </member>
    <member name="M:AI_VMx86.My.MyApplication.#ctor">
    </member>
    <member name="M:AI_VMx86.My.MyApplication.OnCreateMainForm">
    </member>
    <member name="N:AI_VMx86.My.Resources">
    </member>
    <member name="T:AI_VMx86.My.Resources.Resources">
      <summary>
A strongly-typed resource class, for looking up localized strings, etc.</summary>
    </member>
    <member name="F:AI_VMx86.My.Resources.Resources.resourceMan">
    </member>
    <member name="F:AI_VMx86.My.Resources.Resources.resourceCulture">
    </member>
    <member name="P:AI_VMx86.My.Resources.Resources.ResourceManager">
      <summary>
Returns the cached ResourceManager instance used by this class.</summary>
    </member>
    <member name="P:AI_VMx86.My.Resources.Resources.Culture">
      <summary>
Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class.</summary>
    </member>
    <member name="P:AI_VMx86.My.Resources.Resources.Dell_UltraSharp_27">
      <summary>
Looks up a localized resource of type System.Drawing.Bitmap.</summary>
    </member>
    <member name="T:AI_VMx86.My.MySettings">
    </member>
    <member name="F:AI_VMx86.My.MySettings.defaultInstance">
    </member>
    <member name="F:AI_VMx86.My.MySettings.addedHandler">
    </member>
    <member name="F:AI_VMx86.My.MySettings.addedHandlerLockObject">
    </member>
    <member name="M:AI_VMx86.My.MySettings.AutoSaveSettings(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="P:AI_VMx86.My.MySettings.Default">
    </member>
    <member name="T:AI_VMx86.My.MySettingsProperty">
    </member>
    <member name="P:AI_VMx86.My.MySettingsProperty.Settings">
    </member>
    <member name="T:AI_VMx86.FormDisplayConsole">
    </member>
    <member name="M:AI_VMx86.FormDisplayConsole.Print(System.String@)">
      <param name="Userinput">
</param>
    </member>
    <member name="M:AI_VMx86.FormDisplayConsole.CLS">
    </member>
    <member name="M:AI_VMx86.FormDisplayConsole.Input(System.String@)">
      <param name="Message">
</param>
    </member>
    <member name="M:AI_VMx86.FormDisplayConsole.Dispose(System.Boolean)">
      <param name="disposing">
</param>
    </member>
    <member name="F:AI_VMx86.FormDisplayConsole.components">
    </member>
    <member name="M:AI_VMx86.FormDisplayConsole.InitializeComponent">
    </member>
    <member name="T:AI_VMx86.VM_MachineUI">
    </member>
    <member name="M:AI_VMx86.VM_MachineUI.ExecuteCode(System.String@)">
      <param name="Code">
</param>
    </member>
    <member name="M:AI_VMx86.VM_MachineUI.ButtonRunCode_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:AI_VMx86.VM_MachineUI.ButtonNewScrn_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:AI_VMx86.VM_MachineUI.ButtonClrScrn_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:AI_VMx86.VM_MachineUI.Dispose(System.Boolean)">
      <param name="disposing">
</param>
    </member>
    <member name="F:AI_VMx86.VM_MachineUI.components">
    </member>
    <member name="M:AI_VMx86.VM_MachineUI.InitializeComponent">
    </member>
    <member name="T:AI_VMx86.STACK_VM.StackMemoryFrame">
      <summary>
Memory frame for Variables</summary>
    </member>
    <member name="T:AI_VMx86.STACK_VM.StackMemoryFrame.Var">
    </member>
    <member name="F:AI_VMx86.STACK_VM.StackMemoryFrame.Var.Value">
    </member>
    <member name="F:AI_VMx86.STACK_VM.StackMemoryFrame.Var.VarNumber">
    </member>
    <member name="F:AI_VMx86.STACK_VM.StackMemoryFrame.ReturnAddress">
    </member>
    <member name="F:AI_VMx86.STACK_VM.StackMemoryFrame.Variables">
    </member>
    <member name="M:AI_VMx86.STACK_VM.StackMemoryFrame.#ctor(System.Int32@)">
      <param name="ReturnAddress">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.StackMemoryFrame.GetReturnAddress">
    </member>
    <member name="M:AI_VMx86.STACK_VM.StackMemoryFrame.GetVar(System.String@)">
      <param name="VarNumber">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.StackMemoryFrame.SetVar(System.String@,System.Int32@)">
      <param name="VarNumber">
</param>
      <param name="value">
</param>
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_CPU">
      <summary>
SpydazWeb X86 Assembly language Virtual X86 Processor</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.GPU">
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.RunningState">
      <summary>
Used to monitor the Program status ; If the program is being executed then the cpu must be running the Property value can only be changed within the program</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.mRunningState">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.CPU_CACHE">
      <summary>
This is the cpu stack memory space; Items being interrogated will be placed in this memeory frame calling functions will access this frame ; the cpu stack can be considered to be a bus; Functions are devices / or gate logic which is connected to the bus via the cpu;</summary>
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.GetInstructionAddress">
      <summary>
Returns the Current position of the instruction Pointer in the Program being executed The instruction Pionet can be manipulated Jumping backwards and forwards in the program code.</summary>
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.Get_Instruction_Pointer_Position">
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.Get_Current_Stack_Data">
      <summary>
Returns the current data in the stack</summary>
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.View_C_P_U">
      <summary>
Returns the Current Cache (the stack)</summary>
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.Get_Current_Stack_Item">
      <summary>
Returns the current object on top of the stack</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.CPU_ERR">
      <summary>
Used to pass the intensive error messaging required;</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.ProgramData">
      <summary>
Used to hold the Program being sent to the CPU A list of objects has been chosen to allow for a Richer CPU enabling for objects to be passed instead of strings; due to this being a compiler as well as a morenized CPU converting strings to string or integers or booleans etc makes it much harder to create quick easy code; the sender is expeected to understand the logic of the items in the program the decoder only decodes bassed on what is expected;</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.InstructionAdrress">
      <summary>
the InstructionAdrress is the current position in the program; it could be considered to be the line numbe</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.PROCESS_NAME">
      <summary>
Name of current program or process running in CPU thread</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.CurrentCache">
      <summary>
Used for local memory frame</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.R_A_M">
      <summary>
Used to Store memory frames (The Heap)</summary>
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.View_R_A_M">
      <summary>
Returns the Ram as a Stack of Stack Memeory frames;</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.WaitTime">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.#ctor(System.String@)">
      <summary>
Each Program can be considered to be a task or thread; A name should be assigned to the Process; Processes themselves can be stacked in a higher level processor, allowing for paralel processing of code This process allows for the initialization of the CPU; THe Prgram will still need to be loaded</summary>
      <param name="ThreadName">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.#ctor(System.String@,System.Collections.Generic.List{System.String}@)">
      <summary>
Load Program and Executes Code on CPU</summary>
      <param name="ThreadName">
A name is required to Identify the Process</param>
      <param name="Program">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.LoadProgram(System.Collections.Generic.List{System.String}@)">
      <summary>
Loads items in to the program cache; this has been added to allow for continuious running of the VM the run/wait Command will be added to the assembler enabling for the pausing of the program and restarting of the program stack</summary>
      <param name="Prog">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.LoadProgram(System.Collections.Generic.List{System.Object}@)">
      <summary>
Loads items in to the program cache; this has been added to allow for continuious running of the VM the run/wait Command will be added to the assembler enabling for the pausing of the program and restarting of the program stack</summary>
      <param name="Prog">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.RUN">
      <summary>
Begins eexecution of the instructions held in program data</summary>
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.IsHalted">
      <summary>
Checks the status of the cpu</summary>
    </member>
    <member name="P:AI_VMx86.STACK_VM.ZX81_CPU.IsWait">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.EXECUTE">
      <summary>
Executes the next instruction in the Program Each Instruction is fed individually to the decoder : The Execute cycle Checks the Current State to determine if to fetch the next instruction to be decoded;(or EXECUTED) - The decoder contains the Chip logic</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.Fetch">
      <summary>
Program Instructions can be boolean/String or integer so an object is assumed enabling for later classification of the instructions at the decoder level : The Fetch Cycle Fetches the next Instruction in the Program to be executed: It is fed to the decoder to be decoded and executed</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.DECODE(System.Object@)">
      <summary>
Contains MainInstruction Set: Decode Cycle Decodes program instructions from the program the Insruction pointer points to the current Instruction being feed into the decoder: Important Note : the stack will always point to the data at top of the CPU CACHE (Which is Working Memory); THe memory frames being used are Extensions of this memeory and can be seen as registers, itself being a memory stack (stack of memory frames)</summary>
      <param name="ProgramInstruction">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.ToInt(System.Boolean@)">
      <param name="Bool">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.ToBool(System.Int32@)">
      <param name="Val">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.NOT_ToBool(System.Int32@)">
      <param name="Val">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.CheckJumpAddress(System.Int32@)">
      <summary>
Checks if there is a jump address available</summary>
      <param name="address">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.CheckThereIsAReturnAddress">
      <summary>
Function used by the internal functions to check if there is a return address</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.GetCurrentFrame">
      <summary>
RAM is a STACK MEMORY - Here we can take a look at the stack item</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.GetStackData">
      <summary>
Outputs stack data for verbose output</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.ToJson(System.Object@)">
      <param name="OBJ">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.Peek">
      <summary>
REQUIRED TO SEE IN-SIDE CURRENT POINTER LOCATION ----------Public For Testing Purposes-----------</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.BINARYOP(System.String@,System.Int32,System.Int32)">
      <param name="INSTRUCTION">
</param>
      <param name="LEFT">
</param>
      <param name="RIGHT">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.CheckStackHasAtLeastOneItem(System.Collections.Stack@)">
      <param name="Current">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.CheckStackHasAtLeastOneItem">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.CheckRamHasAtLeastOneItem">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.JumpIf_TRUE(System.Int32@)">
      <param name="Address">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.JUMP(System.Int32@)">
      <param name="Address">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.JumpIf_False(System.Int32@)">
      <param name="Address">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.Push(System.Object@)">
      <summary>
Puts a value on the cpu stack to be available to funcitons</summary>
      <param name="Value">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.Pop">
      <summary>
Pops a value of the cpu_Stack (current workspace)</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.ToPositive(System.Int32)">
      <param name="Number">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.ToNegative(System.Int32)">
      <param name="Number">
</param>
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_CPU.State">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.State.RUN">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.State.HALT">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.State.PAUSE">
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame">
      <summary>
Memory frame for Variables</summary>
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.Var">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.Var.Value">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.Var.VarNumber">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.ReturnAddress">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.Variables">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.#ctor(System.Int32@)">
      <param name="ReturnAddress">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.GetReturnAddress">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.GetVar(System.String@)">
      <param name="VarNumber">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.SetVar(System.String@,System.String@)">
      <param name="VarNumber">
</param>
      <param name="value">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.StackMemoryFrame.RemoveVar(System.String@)">
      <param name="VarNumber">
</param>
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_CPU.VM_ERR">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_ERR.ErrorStr">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_ERR.frm">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_ERR.CpuCurrentState">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.VM_ERR.#ctor(System.String@,AI_VMx86.STACK_VM.ZX81_CPU)">
      <param name="Err">
</param>
      <param name="CPUSTATE">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_CPU.VM_ERR.RaiseErr">
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds">
      <summary>
COMMANDS FOR ASSEMBLY LANGUAGE FOR THIS CPU SPYDAZWEB_VM_X86</summary>
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._NULL">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._REMOVE">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._RESUME">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._PUSH">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._PULL">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._PEEK">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._WAIT">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._PAUSE">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._HALT">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._DUP">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._JMP">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._JIF_T">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._JIF_F">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._JIF_EQ">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._JIF_GT">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._JIF_LT">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._LOAD">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._STORE">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._CALL">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._RET">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._PRINT_M">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._PRINT_C">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._ADD">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._SUB">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._MUL">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._DIV">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._AND">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._OR">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._NOT">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._IS_EQ">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._IS_GT">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._IS_GTE">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._IS_LT">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._IS_LTE">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._TO_POS">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._TO_NEG">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._INCR">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_CPU.VM_x86_Cmds._DECR">
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_GPU">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_GPU.iMonitorConsole">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_GPU.#ctor">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_GPU.ConsolePrint(System.String@)">
      <param name="Str">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_GPU.Console_CLS">
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_RAM">
    </member>
    <member name="T:AI_VMx86.STACK_VM.ZX81_RAM.Variable">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_RAM.Variable.iName">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_RAM.Variable.iValue">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_RAM.Variable.iType">
    </member>
    <member name="F:AI_VMx86.STACK_VM.ZX81_RAM.CurrentVars">
      <summary>
Currently only Variables can be stored</summary>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_RAM.#ctor">
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_RAM.UpdateVar(System.String@,System.String@)">
      <param name="VarName">
</param>
      <param name="iVALUE">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_RAM.RemoveVar(AI_VMx86.STACK_VM.ZX81_RAM.Variable@)">
      <param name="Var">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_RAM.AddVar(AI_VMx86.STACK_VM.ZX81_RAM.Variable@)">
      <param name="Var">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_RAM.CheckVar(System.String@)">
      <param name="VarName">
</param>
    </member>
    <member name="M:AI_VMx86.STACK_VM.ZX81_RAM.GetVar(System.String@)">
      <param name="VarName">
</param>
    </member>
    <member name="N:AI_VMx86">
    </member>
  </members>
</doc>
